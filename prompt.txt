Generate a conventional commit message with emojis based on the changes given below.     Use the following categories and emojis:
    'docs': '📝',
    'feat': '✨',
    'fix': '🐛',
    'style': '🎨',
    'refactor': '🔨',
    'chore': '🚀',
    'config': '⚙️'
    For example: 📝 docs(README.md): add installation method with docker
    Please respond with a one-liner commit message, nothing more.
Changes:
diff --git a/script.py b/script.py
index 0f9d631..94d8ebd 100644
--- a/script.py
+++ b/script.py
@@ -2,35 +2,50 @@ import subprocess
 import requests
 import json
 
+def run_command(command):
+    try:
+        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
+        return result.stdout.decode().splitlines()
+    except subprocess.CalledProcessError as e:
+        print(f"Error running command {' '.join(command)}: {e.stderr.decode()}")
+        return []
+
 def get_changed_files():
-    result = subprocess.run(['git', 'diff', '--name-only', 'HEAD', 'HEAD~1'], stdout=subprocess.PIPE)
-    files_changed = result.stdout.decode().split()
+    # print("Getting changed files...")
+    files_changed = run_command(['git', 'diff', '--name-only'])
+    if not files_changed:
+        print("No files changed or error in retrieving changed files.")
     return files_changed
 
-def categorize_files(files):
-    categories = {
-        'docs': '📝',
-        'feat': '✨',
-        'fix': '🐛',
-        'style': '🎨',
-        'refactor': '🔨',
-        'chore': '🚀',
-        'config': '⚙️'
-    }
-    categorized_files = {}
-    for file in files:
-        if 'README.md' in file or 'docs' in file:
-            categorized_files[file] = 'docs'
-        # Add more categorization logic here if needed
-        else:
-            categorized_files[file] = 'feat'  # Default category for example
-    return categorized_files
-
-def generate_commit_message(categorized_files):
-    prompt = "Generate a conventional commit message with emojis based on the following changes:
"
-    for file, category in categorized_files.items():
-        emoji = categories.get(category, '✨')  # Default to ✨ for unknown categories
-        prompt += f"{emoji} {category}({file}): describe change
"
+def get_file_diffs():
+    diffs = run_command(['git', 'diff'])
+    return diffs
+
+def generate_commit_message(files_changed, file_diffs):
+    # print("Generating commit message...")
+
+    # Instruction for the AI model
+    instruction = (
+        "Generate a conventional commit message with emojis based on the changes given below. "
+        "Use the following categories and emojis:
"
+        "    'docs': '📝',
"
+        "    'feat': '✨',
"
+        "    'fix': '🐛',
"
+        "    'style': '🎨',
"
+        "    'refactor': '🔨',
"
+        "    'chore': '🚀',
"
+        "    'config': '⚙️'
"
+        "For example: 📝 docs(README.md): add installation method with docker
"
+        "Please respond with a one-liner commit message, nothing more.
"
+    )
+
+    # Prepare the prompt for the AI model
+    prompt = instruction + "
Changes:
" + "
".join(file_diffs)
+    # print(f"Prompt for AI has been saved to prompt.txt")
+
+    # Save prompt to file
+    with open('prompt.txt', 'w') as f:
+        f.write(prompt)
 
     response = requests.post(
         'http://localhost:11434/api/chat',
@@ -41,11 +56,28 @@ def generate_commit_message(categorized_files):
         })
     )
 
-    commit_message = response.json()['choices'][0]['message']['content']
-    return commit_message.strip()
+    # Process response to handle multi-part responses
+    response_content = response.content.decode()
+    responses = response_content.split('
')
+    full_message = ""
+    for part in responses:
+        if part:
+            try:
+                message_part = json.loads(part)
+                if 'message' in message_part:
+                    full_message += message_part['message']['content']
+            except json.JSONDecodeError:
+                continue
+
+    commit_message = full_message.strip()
+    # print(f"Generated commit message: {commit_message}")
+    return commit_message
 
 if __name__ == "__main__":
     files_changed = get_changed_files()
-    categorized_files = categorize_files(files_changed)
-    commit_message = generate_commit_message(categorized_files)
-    print(commit_message)
+    if files_changed:
+        file_diffs = get_file_diffs()
+        if file_diffs:
+            commit_message = generate_commit_message(files_changed, file_diffs)
+            if commit_message:
+                print(commit_message)
\ No newline at end of file
